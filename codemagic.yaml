definitions:
  instance_mac_mini: &instance_mac_mini
    instance_type: mac_mini_m1
    max_build_duration: 75
  env_versions: &env_versions
    flutter: stable
    xcode: latest
    cocoapods: default
  integrations:
    app_store_connect_integrations: &app_store_connect_integrations
      app_store_connect: Lemonade
  environment:
    groups_environment_values: &groups_environment_values
      groups:
        - env_values
    ios_signing_staging: &ios_signing_staging
      ios_signing:
        distribution_type: app_store
        bundle_identifier: social.lemonade.app.staging
      vars:
        APP_ID: 6450680676
    ios_signing_production: &ios_signing_production
      ios_signing:
        distribution_type: app_store
        bundle_identifier: social.lemonade.app
      vars:
        APP_ID: 6450694884
    android_signing_staging: &android_signing_staging
      android_signing:
        - Lemonade
      groups:
        - google_credentials 
      vars:
        PACKAGE_NAME: "social.lemonade.app.staging"
        GOOGLE_PLAY_TRACK: "internal"
  artifacts:
    - &ipa build/ios/ipa/*.ipa
    - &xcode_log /tmp/xcodebuild_logs/*.log
    - &dsym $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    - &app $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    - &apk build/**/outputs/apk/**/*.apk
    - &aab build/**/outputs/bundle/**/*.aab
    - &android_log build/**/outputs/**/mapping.txt
    - &flutter_log flutter_drive.log
  scripts:
    - &setup_staging_env
      name: Setup Staging ENV
      script: |
        #!/bin/sh
        set -e # exit on first failed command
        echo $ENV | base64 --decode > $CM_BUILD_DIR/.env
        echo $ENV_STAGING | base64 --decode > $CM_BUILD_DIR/.env.staging
        echo $ENV_PRODUCTION | base64 --decode > $CM_BUILD_DIR/.env.production
    - &setup_production_env
      name: Setup Production ENV
      script: |
        #!/bin/sh
        set -e # exit on first failed command
        echo $ENV_PRODUCTION | base64 --decode > $CM_BUILD_DIR/.env
    - &use_profiles
      name: Set up code signing settings on Xcode project
      script: |
        xcode-project use-profiles  
    - &get_flutter_packages
      name: Get Flutter packages
      script: |
        flutter packages pub get
    - &install_firebase_crashlytics
      name: Install firebase crashlytics
      script: |
        flutter pub add firebase_crashlytics
    - &setup_local_properties
      name: Set up local properties
      script: |
        echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
    - &install_pods
      name: Install pods
      script: |
        find . -name "Podfile" -execdir pod install \;
    - &build_ipa_staging
      name: Build ipa staging
      script: |
        flutter build ipa --release \
          --build-name=1.0.0 \
          --build-number=$(($(app-store-connect get-latest-testflight-build-number "$APP_ID") + 1)) \
          --export-options-plist=/Users/builder/export_options.plist \
          --flavor="staging" \
          -t "lib/main_staging.dart"
    - &build_ipa_production
      name: Build ipa production
      script: |
        flutter build ipa --release \
          --build-name=1.0.0 \
          --build-number=$(($(app-store-connect get-latest-testflight-build-number "$APP_ID") + 1)) \
          --export-options-plist=/Users/builder/export_options.plist \
          --flavor="production" \
          -t "lib/main_production.dart"
    - &upload_staging_dsym_to_firebase
      name: Upload debug symbols to Firebase Crashlytics
      script: | 
        echo "Find build artifacts"
        dsymPath=$(find $CM_BUILD_DIR/build/ios/archive/Runner.xcarchive -name "*.dSYM")
        if [[ -z ${dsymPath} ]]
        then
          echo "No debug symbols were found, skip publishing to Firebase Crashlytics"
        else
          echo "Publishing debug symbols from $dsymPath to Firebase Crashlytics"
          ls -d -- ios/Pods/*
          $CM_BUILD_DIR/ios/Pods/FirebaseCrashlytics/upload-symbols \
            -gsp ios/config/staging/GoogleService-Info.plist -p ios $dsymPath
        fi
    - &build_apk_staging
      name: Build Android apk staging
      script: |
        BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks="$GOOGLE_PLAY_TRACK") + 1))      
        flutter build apk --release \
          --build-name=1.0.$BUILD_NUMBER \
          --build-number=$BUILD_NUMBER \
          --flavor="staging" \
          -t "lib/main_staging.dart"
    - &build_aab_staging
      name: Build Android appbundle staging
      script: |
        BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks="$GOOGLE_PLAY_TRACK") + 1))      
        flutter build appbundle --release \
          --build-name=1.0.$BUILD_NUMBER \
          --build-number=$BUILD_NUMBER \
          --flavor="staging" \
          -t "lib/main_staging.dart"
    - &notify_ios_staging_to_slack
      name: Notify iOS Staging app to slack
      script: | 
        ARTIFACT_URL=$(echo $CM_ARTIFACT_LINKS | jq -r '.[] | select(.name | endswith("'".ipa"'")) | .url')
        curl -0 -v -X POST $SLACK_WEBHOOK_URL \
        -H 'Content-type: application/json' \
        --data-raw '
        {
          "attachments": [
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":white_check_mark: Staging app build successful for iOS"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Build Link*:\n<https://codemagic.io/app/'"$CM_PROJECT_ID"'/build/'"$CM_BUILD_ID"'|Click here>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Pull Request*:\n<https://github.com/'"$CM_REPO_SLUG"'/pull/'"$CM_PULL_REQUEST_NUMBER"'|Open pull request>"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*\n'"$CM_BRANCH"'"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit*\n'"$CM_COMMIT"'"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Download Staging App on TestFlight"
                      },
                      "url": "itms-beta://beta.itunes.apple.com/v1/app/6450680676"
                    }
                  ]
                }
              ]
            }
          ]
        }'
    - &notify_android_staging_to_slack
      name: Notify Android Staging app to slack
      script: | 
        ARTIFACT_URL=$(echo $CM_ARTIFACT_LINKS | jq -r '.[] | select(.name | endswith("'".apk"'")) | .url')
          curl -0 -v -X POST $SLACK_WEBHOOK_URL \
          -H 'Content-type: application/json' \
          --data-raw '
          {
            "attachments": [
              {
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":white_check_mark: Staging app build successful for Android"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Build Link*:\n<https://codemagic.io/app/'"$CM_PROJECT_ID"'/build/'"$CM_BUILD_ID"'|Click here>"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Pull Request*:\n<https://github.com/'"$CM_REPO_SLUG"'/pull/'"$CM_PULL_REQUEST_NUMBER"'|Open pull request>"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Branch*\n'"$CM_BRANCH"'"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Commit*\n'"$CM_COMMIT"'"
                      }
                    ]
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "Download APK"
                        },
                        "url": "'${ARTIFACT_URL}'"
                      }
                    ]
                  }
                ]
              }
            ]
          }'
  email_staging: &email_staging
    email:
      recipients:
        - sieu@coderpush.com
        - thinh@coderpush.com
      notify:
        success: true
        failure: false
  email_production: &email_production
    email:
      recipients:
        - sieu@coderpush.com
        - thinh@coderpush.com
        - kc@lemonade.social
        - chris@lemonade.social
        - jakob@lemonade.social
        - pranoti@lemonade.social
        - rishi@lemonade.social
        - david@lemonade.social
      notify:
        success: true
        failure: false
  ios_app_store_publish: &ios_app_store_publish
    app_store_connect:
      auth: integration
      submit_to_testflight: true
      submit_to_app_store: false
  android_staging_publish: &android_staging_publish
    google_play:
      credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
      track: $GOOGLE_PLAY_TRACK
      submit_as_draft: true
workflows:
  # Build iOS Staging 
  ios-staging:
    name: iOS Staging
    <<: *instance_mac_mini
    integrations:
      <<: *app_store_connect_integrations
    environment:
      <<: *groups_environment_values
      <<: *ios_signing_staging
      <<: *env_versions
    triggering:
      events:
        - push
      branch_patterns: 
        - pattern: master
      cancel_previous_builds: true
    scripts:
      - *setup_staging_env
      - *use_profiles
      - *get_flutter_packages
      - *install_firebase_crashlytics
      - *install_pods
      - *build_ipa_staging
    artifacts:
      - *ipa
      - *xcode_log
      - *dsym
      - *app
    publishing:
      <<: *ios_app_store_publish
      <<: *email_staging
      scripts:
        - *upload_staging_dsym_to_firebase
        - *notify_ios_staging_to_slack
  # Build Android Staging
  android-staging:
    name: Android Staging
    <<: *instance_mac_mini
    environment:
      <<: *groups_environment_values
      <<: *env_versions
      <<: *android_signing_staging
    triggering:
      events:
        - push
      branch_patterns: 
        - pattern: master
      cancel_previous_builds: true
    scripts:
      - *setup_staging_env
      - *setup_local_properties
      - *get_flutter_packages
      - *build_apk_staging
      - *build_aab_staging
    artifacts:
      - *apk
      - *aab
      - *android_log
    publishing:
      <<: *android_staging_publish
      <<: *email_staging
      scripts:
        - *notify_android_staging_to_slack