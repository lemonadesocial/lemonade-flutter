#import "../../account/fragment/lens_account.graphql"

fragment PhysicalAddress on PhysicalAddress {
  country
  formatted
  locality
  postalCode
  region
  streetAddress
}

fragment MediaAudio on MediaAudio {
  artist
  cover
  credits
  duration
  genre
  item
  kind
  license
  lyrics
  recordLabel
  type
  __typename
}

fragment MediaVideo on MediaVideo {
  altTag
  cover
  duration
  item
  license
  type
  __typename
}

fragment MediaImage on MediaImage {
  altTag
  item
  license
  type
  width
  height
  __typename
}

fragment LensPost on Post {
  id
  slug
  contentUri
  author {
    ...LensAccount
  }
  feed {
    address
  }
  stats {
    bookmarks
    comments
    reposts
    reactions
    quotes
    collects
    tips
  }
  isEdited
  isDeleted
  timestamp
  root {
    id
  }
  quoteOf {
    id
  }
  commentOn {
    id
  }
  mentions {
    ... on PostMention {
      ... on AccountMention {
        account
        replace {
          from
          to
        }
        __typename
      }
      ... on GroupMention {
        group
        replace {
          from
          to
        }
        __typename
      }
    }
  }
  metadata {
    ... on ImageMetadata {
      id
      title
      content
      tags
      mainContentFocus
      contentWarning
      image {
        ...MediaImage
      }
      attachments {
        ... on MediaImage {
          ...MediaImage
        }
        ... on MediaVideo {
          ...MediaVideo
        }
        ... on MediaAudio {
          ...MediaAudio
        }
      }
      __typename
    }
    ... on EventMetadata {
      id
      title
      content
      links
      location {
        virtual
        physical
      }
      address {
        ...PhysicalAddress
      }
      tags
      position
      mainContentFocus
      attachments {
        ... on MediaImage {
          ...MediaImage
        }
        ... on MediaVideo {
          ...MediaVideo
        }
        ... on MediaAudio {
          ...MediaAudio
        }
      }
      __typename
    }
    ... on TextOnlyMetadata {
      id
      content
      mainContentFocus
      tags
      contentWarning
      __typename
    }
    ... on LinkMetadata {
      id
      content
      mainContentFocus
      sharingLink
      tags
      attachments {
        ... on MediaImage {
          ...MediaImage
        }
        ... on MediaVideo {
          ...MediaVideo
        }
        ... on MediaAudio {
          ...MediaAudio
        }
      }
      __typename
    }
    __typename
  }
  operations {
    hasReacted(request: { type: UPVOTE })
    hasReposted {
      optimistic
      onChain
    }
    canDelete {
      ... on PostOperationValidationPassed {
        passed
      }
    }
  }
}
